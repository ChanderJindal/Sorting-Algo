#include <bits/stdc++.h>
using namespace std;
void insertion_sort(int n , int arr[]){
for(int i = 1 ; i<n; i++){
int key = arr[i], j = i-1;
while(arr[j]>key && j>= 0){
    arr[j+1] = arr[j];
    j--;
}
arr[j+1] = key;
}
return;
}
void merger(int h, int l, int m , int arr[]){
int left_ = m-l+1,right_ = h-m;
int left_one[left_], right_one[right_];
for(int i = 0;i< left_;i++)
    left_one[i] = arr[i+l];
for(int i =0;i< right_;i++)
    right_one[i] = arr[m+i+1];
int i{0},j{0};//l--;
while(i < left_ && j < right_){
    if(left_one[i]<right_one[j]){
        arr[l] = left_one[i];
        i++;
    }else{
    arr[l] = right_one[j];
    j++;
    }
    l++;
}
while(i< left_){
    arr[l] = left_one[i];
    i++; l++;
}
while(j < right_){
    arr[l] = right_one[j];
    l++; j++;
}
return;
}
void merger_sort(int h , int arr[] , int l = 0){
if(l >= h)
    return;
int mid = (h-l-1)/2 + l;
merger_sort(h,arr,mid+1);
merger_sort(mid,arr,l);
merger(h,l,mid,arr);
return;
}
void printer(int n, int arr[]){
for(int i = 0;i<n;i++)
    cout<<arr[i]<<" ";
cout<<endl;
return;
}
void quickSort(int arr[],int low,int high){
	if(low>=high)
		return;
	int mid = low + (high-low)/2;
	int pivot = arr[mid], left = low, right = high;
	while(left<=right){
		while(arr[left]<pivot)
			left++;
		while(arr[right]>pivot)
			right--;
		if(left<=right){
			swap(arr[left],arr[right]);
			left++;
			right--;
		}
	}
	quickSort(arr,low,right);
	quickSort(arr,left,high);
}
void bubble_sort(int n, int arr[]){
for(int i = 0; i<n;i++){
    for(int j = i+1;j<n;j++){
        if(arr[i] > arr[j])
            swap(arr[i],arr[j]);
    }
}
return;
}
void heap_helper(int arr[], int n, int i){
    int largest = i;
    int l = 2 * i + 1,r = 2 * i + 2;
    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;
     if (largest != i) {
        swap(arr[i], arr[largest]);
         heap_helper(arr, n, largest);
    }
}
 void heap_sort(int arr[], int n){
    for (int i = n / 2 - 1; i >= 0; i--)
        heap_helper(arr, n, i);
     for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
         heap_helper(arr, i, 0);
    }
}
void array_builder(int n , int arr[]){
	srand(time(0));
	cout<<"Our Array is"<<endl;
	for(int i = 0; i< n ;i++){
        arr[i] = rand()%1000;
        cout<<arr[i]<<" ";
	}
	cout<<endl;
}
void functions(){
cout<<"Press [1] for new one time array generation (Max Size 1000)"<<endl;
cout<<"Press [2] for Insertion Sort"<<endl<<"Press [3] for Merge Sort"<<endl;
cout<<"Press [4] for Quick Sort"<<endl<<"Press [5] for Bubble Sort"<<endl;
cout<<"Press [6] for Heap Sort"<<endl<<"Press [7] for In-built sorting"<<endl;
cout<<"Press [-1] for program Termination"<<endl;
}
int main(){
	int n,size_;
	int arr[1000];
	functions();
	cout<<"Issue a New Command"<<endl;
	cin>>n;
	while(n!= -1){
        if(n == 1){
            cout<<"Enter the Size of Array"<<endl;
            cin>>size_;
            array_builder(size_,arr);
        }else if(n == 2){
        insertion_sort(size_,arr);
        printer(size_,arr);
        }else if(n==3){
        merger_sort(n,arr);
        printer(size_,arr);
        }else if(n == 4){
        quickSort(arr,0,size_-1);
        printer(size_,arr);
        }else if(n == 5){
        bubble_sort(size_,arr);
        printer(size_,arr);
        }else if(n == 6){
        heap_sort(arr,size_);
        printer(size_,arr);
        }else if(n==7){
        sort(arr,arr+size_);
        printer(size_,arr);
        }else{
        cout<<"Invalid Input"<<endl;
        functions();
        }
        cout<<"Issue a New Command!"<<endl;
        cin>>n;
	}
cout<<"Program Terminated!"<<endl;
	return 0;
}
